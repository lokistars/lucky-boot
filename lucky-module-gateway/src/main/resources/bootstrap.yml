spring:
  application:
    # 服务注册应用名称,它是构成 Nacos 配置管理 dataId字段的一部分
    # 完整格式 :${prefix}-${spring.profiles.active}.${file-extension}
    # prefix 默认为 spring.application.name 的值，也可以通过配置项 spring.cloud.nacos.config.prefix来配置
    # spring.profiles.active 即为当前环境对应的 profile spring.profiles.active 为空时，对应的连接符 - 也将不存在
    # file-exetension 为配置内容的数据格式，可以通过配置项 spring.cloud.nacos.config.file-extension 来配置。
    name: lucky-module-gateway
  cloud:
    nacos:
      # nacos server 的地址
      server-addr: ${nacos.server}
      username: ${nacos.username}
      password: ${nacos.password}
      # 服务注册
      discovery:
        server-addr: ${nacos.server}
        namespace: ${nacos.namespace}
      config:
        server-addr: ${nacos.server}
        # 配置名前缀，默认${spring.application.name}
        prefix: ${spring.application.name}
        # 配置文件格式：默认properties
        file-extension: yml
        # 指定命名空间：默认public
        namespace: ${nacos.namespace}
        # 分组
        group: DEFAULT_GROUP
        # 超时时间
        timeout: 50000
        # 共享配置文件
        shared-configs:
          - data-id: lucky-common.yml


    gateway:
      discovery:
        locator:
          enabled: true #开启从注册中心动态创建路由的功能，利用微服务名进行路由
          predicates:
           #- Path=pattern,'/'+serviceId.toLowerCase().replace('lucky-','').replace('-client','')+'/**'
            - name: Path
              args:
                pattern: "'/'+serviceId.toLowerCase().replace('lucky-module-','')+'/**'"
          filters:
            - SwaggerHeaderFilter  #配置自定义过滤器
            - StripPrefix=1
          # 根据服务名排除一些不需要暴漏给网关服务 使用SPEL表达式
          include-expression: serviceId matches '^((?!gateway).)*' && serviceId matches '.*-(api|client).*'
          url-expression: "'lb://'+serviceId"
          route-id-prefix:
      # 路由配置
      routes:
        - id: favicon
          uri: no://op
          predicates:
            - Path=/favicon.ico
           #- Method=GET,POST,PUT,DELETE
          filters:
            - SetPath=/
      # 唯⼀路由ID，一般直接用服务名即可
      # - id: dms-service-uc
      #   # URI
      #   uri: lb://dms-service-uc
      #   # 路由条件 支持多种匹配类型,包含After、Before、Between、Cookie、Header、Host、Method等。
      #   predicates:
      #     # 路径匹配
      #     - Path=/user/**
      #   filters:
      #     # 截取一个匹配前缀,切掉第一个/前面的，/user
      #     - StripPrefix=1

      globalcors:
        # 跨域配置
        cors-configurations:
          '[/**]':
            # 允许携带认证信息,表示浏览器可以发送跨域请求的凭证
            allow-credentials: true
            # 允许的域名
            # allowed-origins: "*"
            allowed-origin-patterns: "*"
            # 跨域头设置
            allowed-headers: "*"
            # 跨域预请求
            max-age: 1800
            # 跨域方法
            allowed-methods: "GET,POST,DELETE,PUT,OPTION"

        add-to-simple-url-handler-mapping: true
      default-filters[0]: DedupeResponseHeader=Access-Control-Allow-Origin Access-Control-Allow-Credentials, RETAIN_FIRST

knife4j:
  gateway:
    enabled: true
    strategy: discover
    discover:
      enabled: true
      excluded-services: ${spring.application.name}
